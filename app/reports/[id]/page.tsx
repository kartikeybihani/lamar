"use client";

import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { toast } from "sonner";
import { SourceAttribution } from "@/types";
import {
  ArrowLeft,
  User,
  Calendar,
  Stethoscope,
  FileText,
  Pill,
  AlertTriangle,
  Clock,
  CheckCircle,
  Loader2,
  Download,
  Printer,
  Eye,
  ChevronDown,
  ChevronUp,
  X,
} from "lucide-react";

interface PatientReportData {
  id: string;
  patientName: string;
  mrn: string;
  providerName: string;
  providerNPI: string;
  medication: string;
  primaryDiagnosis: string;
  additionalDiagnoses: string[];
  medicationHistory: string[];
  carePlanText: string;
  generatedAt: string;
  generatedBy: string;
  version: number;
  isFinal: boolean;
  patientInfo: {
    firstName: string;
    lastName: string;
    dateOfBirth: string | null;
    sex: string | null;
    weight: number | null;
    allergies: string | null;
  };
  orderCreatedAt: string;
  sourceAttribution?: SourceAttribution;
}

export default function PatientReportPage() {
  const router = useRouter();
  const params = useParams();
  const [reportData, setReportData] = useState<PatientReportData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showSources, setShowSources] = useState(false);
  const [expandedSections, setExpandedSections] = useState<Set<string>>(
    new Set()
  );
  const [highlightedSection, setHighlightedSection] = useState<string | null>(
    null
  );
  const [highlightedStatement, setHighlightedStatement] = useState<
    string | null
  >(null);
  const [selectedStatement, setSelectedStatement] = useState<string | null>(
    null
  );

  useEffect(() => {
    if (params.id) {
      fetchReportData(params.id as string);
    }
  }, [params.id]);

  const fetchReportData = async (id: string) => {
    try {
      setLoading(true);
      const response = await fetch(`/api/reports/${id}`);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to fetch report");
      }

      const data = await response.json();
      setReportData(data);
    } catch (error) {
      console.error("Error fetching report:", error);
      setError(
        error instanceof Error ? error.message : "Failed to load report"
      );
      toast.error("Failed to load patient report");
    } finally {
      setLoading(false);
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const handleDownload = () => {
    if (!reportData) return;

    // Download Care Plan
    const carePlanContent = reportData.carePlanText;

    const carePlanBlob = new Blob([carePlanContent], { type: "text/plain" });
    const carePlanUrl = URL.createObjectURL(carePlanBlob);
    const carePlanLink = document.createElement("a");
    carePlanLink.href = carePlanUrl;
    carePlanLink.download = `care-plan-${reportData.mrn}-${
      new Date().toISOString().split("T")[0]
    }.txt`;
    document.body.appendChild(carePlanLink);
    carePlanLink.click();
    document.body.removeChild(carePlanLink);
    URL.revokeObjectURL(carePlanUrl);

    // Download Patient Records
    const patientRecordsContent = `PATIENT RECORDS
===============

PATIENT INFORMATION:
-------------------
Patient Name: ${reportData.patientName}
Medical Record Number (MRN): ${reportData.mrn}
Date of Birth: ${
      reportData.patientInfo.dateOfBirth
        ? formatDate(reportData.patientInfo.dateOfBirth)
        : "Not specified"
    }
Sex: ${reportData.patientInfo.sex || "Not specified"}
Weight: ${
      reportData.patientInfo.weight
        ? `${reportData.patientInfo.weight} kg`
        : "Not specified"
    }
Allergies: ${reportData.patientInfo.allergies || "None reported"}

PROVIDER INFORMATION:
--------------------
Provider Name: ${reportData.providerName}
NPI: ${reportData.providerNPI}

DIAGNOSIS INFORMATION:
---------------------
Primary Diagnosis: ${reportData.primaryDiagnosis}
${
  reportData.additionalDiagnoses.length > 0
    ? `Additional Diagnoses:
${reportData.additionalDiagnoses
  .map((diag, index) => `${index + 1}. ${diag}`)
  .join("\n")}`
    : ""
}

MEDICATION INFORMATION:
---------------------
Current Medication: ${reportData.medication}
${
  reportData.medicationHistory.length > 0
    ? `Medication History:
${reportData.medicationHistory
  .map((med, index) => `${index + 1}. ${med}`)
  .join("\n")}`
    : ""
}

ORDER INFORMATION:
-----------------
Order Created: ${formatDateTime(reportData.orderCreatedAt)}
Care Plan Generated: ${formatDateTime(reportData.generatedAt)}
Generated by: ${reportData.generatedBy}
Version: ${reportData.version}
Status: ${reportData.isFinal ? "Final" : "Draft"}`;

    const patientRecordsBlob = new Blob([patientRecordsContent], {
      type: "text/plain",
    });
    const patientRecordsUrl = URL.createObjectURL(patientRecordsBlob);
    const patientRecordsLink = document.createElement("a");
    patientRecordsLink.href = patientRecordsUrl;
    patientRecordsLink.download = `patient-records-${reportData.mrn}-${
      new Date().toISOString().split("T")[0]
    }.txt`;
    document.body.appendChild(patientRecordsLink);
    patientRecordsLink.click();
    document.body.removeChild(patientRecordsLink);
    URL.revokeObjectURL(patientRecordsUrl);

    toast.success("Care plan and patient records downloaded successfully");
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const toggleSection = (sectionName: string) => {
    if (expandedSections.has(sectionName)) {
      // If clicking on the currently expanded section, close it
      setExpandedSections(new Set());
      setHighlightedSection(null);
    } else {
      // If clicking on a different section, close all others and open this one
      setExpandedSections(new Set([sectionName]));
      setHighlightedSection(sectionName);
      setHighlightedStatement(null); // Clear statement highlight when switching sections
      setSelectedStatement(null); // Clear selected statement when switching sections
    }
  };

  const handleStatementClick = (statement: string, sectionName: string) => {
    setHighlightedStatement(statement);
    setHighlightedSection(sectionName);
    setSelectedStatement(statement);
  };

  const formatCarePlanText = (text: string): string => {
    // Convert line breaks to <br> tags
    let formattedText = text.replace(/\n/g, "<br>");

    // Handle double asterisks (**text**) for bold
    formattedText = formattedText.replace(
      /\*\*(.*?)\*\*/g,
      "<strong>$1</strong>"
    );

    // Handle single asterisks (*text*) for bold
    formattedText = formattedText.replace(
      /\*([^*]+)\*/g,
      "<strong>$1</strong>"
    );

    // Add highlighting based on selected section and statement
    if (highlightedSection && reportData?.sourceAttribution) {
      console.log("Highlighting section:", highlightedSection);
      console.log("Highlighted statement:", highlightedStatement);

      const section = reportData.sourceAttribution.sections.find(
        (s) => s.section === highlightedSection
      );

      if (section) {
        console.log("Found section:", section);

        if (highlightedStatement) {
          // Highlight specific statement
          console.log("Highlighting specific statement:", highlightedStatement);
          const statementToHighlight = highlightedStatement.trim();
          console.log("Original care plan text length:", formattedText.length);

          // Try multiple approaches for better matching
          const escapedStatement = statementToHighlight.replace(
            /[.*+?^${}()|[\]\\]/g,
            "\\$&"
          );

          // Try exact match first
          if (formattedText.includes(statementToHighlight)) {
            formattedText = formattedText.replace(
              new RegExp(`(${escapedStatement})`, "gi"),
              '<span class="highlight-statement">$1</span>'
            );
            console.log("Exact match found and highlighted");
          } else {
            // Try more flexible matching
            console.log("Exact match not found, trying flexible matching...");

            // Remove quotes and extra spaces for better matching
            const cleanStatement = statementToHighlight
              .replace(/[""]/g, "")
              .trim();
            console.log("Clean statement:", cleanStatement);

            if (formattedText.includes(cleanStatement)) {
              const escapedClean = cleanStatement.replace(
                /[.*+?^${}()|[\]\\]/g,
                "\\$&"
              );
              formattedText = formattedText.replace(
                new RegExp(`(${escapedClean})`, "gi"),
                '<span class="highlight-statement">$1</span>'
              );
              console.log("Clean match found and highlighted");
            } else {
              // Try to find the line containing the statement
              const lines = formattedText.split("<br>");
              let foundLine = false;

              for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                // Check if this line contains the statement or key parts of it
                const statementWords = cleanStatement
                  .toLowerCase()
                  .split(" ")
                  .filter((word) => word.length > 3);
                const lineWords = line.toLowerCase().split(" ");

                // Count how many statement words are found in this line
                const matchingWords = statementWords.filter((statementWord) =>
                  lineWords.some((lineWord) => lineWord.includes(statementWord))
                );

                // If we have a good match (at least 3 words or 50% of statement words)
                if (
                  matchingWords.length >=
                  Math.min(3, Math.ceil(statementWords.length * 0.5))
                ) {
                  console.log(
                    "Found matching line:",
                    line.substring(0, 100) + "..."
                  );
                  lines[i] = `<span class="highlight-statement">${line}</span>`;
                  foundLine = true;
                  break;
                }
              }

              if (foundLine) {
                formattedText = lines.join("<br>");
                console.log("Line highlighting applied");
              } else {
                // Fallback to phrase matching if line matching fails
                const keyPhrases = cleanStatement
                  .split(/[,;.]/)
                  .filter((phrase) => phrase.trim().length > 5);
                console.log("Key phrases:", keyPhrases);

                keyPhrases.forEach((phrase) => {
                  const trimmedPhrase = phrase.trim();
                  if (trimmedPhrase && formattedText.includes(trimmedPhrase)) {
                    const escapedPhrase = trimmedPhrase.replace(
                      /[.*+?^${}()|[\]\\]/g,
                      "\\$&"
                    );
                    formattedText = formattedText.replace(
                      new RegExp(`(${escapedPhrase})`, "gi"),
                      '<span class="highlight-statement">$1</span>'
                    );
                    console.log("Phrase matched:", trimmedPhrase);
                  }
                });
                console.log("Fallback phrase matching applied");
              }
            }
          }
        } else {
          // Highlight all statements from the section
          console.log("Highlighting all statements from section");
          section.statements.forEach((statement) => {
            const statementText = statement.statement.trim();
            const escapedStatement = statementText.replace(
              /[.*+?^${}()|[\]\\]/g,
              "\\$&"
            );

            if (formattedText.includes(statementText)) {
              formattedText = formattedText.replace(
                new RegExp(`(${escapedStatement})`, "gi"),
                '<span class="highlight-section">$1</span>'
              );
            }
          });
        }
      }
    }

    // Debug: Log if we have any highlights
    if (
      formattedText.includes("highlight-statement") ||
      formattedText.includes("highlight-section")
    ) {
      console.log("Highlights found in text!");
      console.log(
        "Text contains highlight-statement:",
        formattedText.includes("highlight-statement")
      );
      console.log(
        "Text contains highlight-section:",
        formattedText.includes("highlight-section")
      );
    }

    return formattedText;
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-8 h-8 animate-spin text-blue-600 mx-auto mb-4" />
          <p className="text-lg font-medium text-gray-900">
            Loading patient report...
          </p>
        </div>
      </div>
    );
  }

  if (error || !reportData) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">
            Error Loading Report
          </h2>
          <p className="text-gray-600 mb-4">{error || "Report not found"}</p>
          <button onClick={() => router.back()} className="btn-primary">
            Go Back
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen py-8 px-4 sm:px-6 lg:px-8 print:py-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="glass-card p-6 rounded-2xl shadow-lg mb-6 print:shadow-none print:border">
          <div className="flex items-center justify-between mb-6">
            <button
              onClick={() => router.back()}
              className="btn-ghost flex items-center gap-2 print:hidden"
            >
              <ArrowLeft className="w-4 h-4" />
              Back to Reports
            </button>
            <div className="flex gap-2 print:hidden">
              <button
                onClick={handleDownload}
                className="btn-secondary flex items-center gap-2"
              >
                <Download className="w-4 h-4" />
                Download
              </button>
              <button
                onClick={handlePrint}
                className="btn-secondary flex items-center gap-2"
              >
                <Printer className="w-4 h-4" />
                Print
              </button>
            </div>
          </div>

          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Patient Care Plan Report
            </h1>
            <div className="flex items-center justify-center gap-4 text-sm text-gray-600">
              <div className="flex items-center gap-1">
                <Clock className="w-4 h-4" />
                Generated: {formatDateTime(reportData.generatedAt)}
              </div>
              <div className="flex items-center gap-1">
                <CheckCircle className="w-4 h-4 text-green-500" />
                Version {reportData.version}
              </div>
            </div>
          </div>
        </div>

        {/* Two Column Layout */}
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Left Column - Patient Information and Sources */}
          <div className="lg:col-span-1 space-y-6 transition-all duration-300 ease-in-out">
            {!showSources ? (
              <>
                {/* Patient Information Card */}
                <div className="glass-card p-6 rounded-2xl shadow-lg print:shadow-none print:border transition-all duration-300 ease-in-out">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
                    <User className="w-5 h-5" />
                    Patient Information
                  </h2>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium text-gray-500">
                        Patient Name
                      </label>
                      <p className="text-lg font-semibold text-gray-900">
                        {reportData.patientName}
                      </p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-500">
                        Medical Record Number (MRN)
                      </label>
                      <p className="text-lg font-mono font-semibold text-gray-900">
                        {reportData.mrn}
                      </p>
                    </div>
                    <div>
                      <label className="text-sm font-medium text-gray-500">
                        Provider
                      </label>
                      <p className="text-lg font-semibold text-gray-900">
                        {reportData.providerName}
                      </p>
                      <p className="text-sm text-gray-600">
                        NPI: {reportData.providerNPI}
                      </p>
                    </div>
                    {reportData.patientInfo.dateOfBirth && (
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Date of Birth
                        </label>
                        <p className="text-lg text-gray-900">
                          {formatDate(reportData.patientInfo.dateOfBirth)}
                        </p>
                      </div>
                    )}
                    {reportData.patientInfo.sex && (
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Sex
                        </label>
                        <p className="text-lg text-gray-900">
                          {reportData.patientInfo.sex}
                        </p>
                      </div>
                    )}
                    {reportData.patientInfo.weight && (
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Weight
                        </label>
                        <p className="text-lg text-gray-900">
                          {reportData.patientInfo.weight} kg
                        </p>
                      </div>
                    )}
                    {reportData.patientInfo.allergies && (
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Allergies
                        </label>
                        <p className="text-lg text-gray-900">
                          {reportData.patientInfo.allergies}
                        </p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Diagnosis & Medication Card */}
                <div className="glass-card p-6 rounded-2xl shadow-lg print:shadow-none print:border transition-all duration-300 ease-in-out">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
                    <Stethoscope className="w-5 h-5" />
                    Diagnosis & Medication
                  </h2>
                  <div className="space-y-4">
                    <div>
                      <label className="text-sm font-medium text-gray-500">
                        Primary Diagnosis
                      </label>
                      <p className="text-lg font-semibold text-gray-900">
                        {reportData.primaryDiagnosis}
                      </p>
                    </div>
                    {reportData.additionalDiagnoses.length > 0 && (
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Additional Diagnoses
                        </label>
                        <ul className="list-disc list-inside space-y-1">
                          {reportData.additionalDiagnoses.map(
                            (diagnosis, index) => (
                              <li key={index} className="text-gray-900">
                                {diagnosis}
                              </li>
                            )
                          )}
                        </ul>
                      </div>
                    )}
                    <div>
                      <label className="text-sm font-medium text-gray-500">
                        Medication
                      </label>
                      <p className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                        <Pill className="w-4 h-4" />
                        {reportData.medication}
                      </p>
                    </div>
                    {reportData.medicationHistory.length > 0 && (
                      <div>
                        <label className="text-sm font-medium text-gray-500">
                          Medication History
                        </label>
                        <ul className="list-disc list-inside space-y-1">
                          {reportData.medicationHistory.map((med, index) => (
                            <li key={index} className="text-gray-900">
                              {med}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              </>
            ) : (
              /* Sources Panel */
              reportData.sourceAttribution && (
                <div className="glass-card p-6 rounded-2xl shadow-lg print:shadow-none print:border transition-all duration-300 ease-in-out">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
                    <Eye className="w-5 h-5" />
                    Sources
                  </h2>
                  <div className="space-y-4">
                    {reportData.sourceAttribution.sections.map(
                      (section, sectionIndex) => (
                        <div
                          key={sectionIndex}
                          className="border border-gray-200 rounded-lg"
                        >
                          {/* Section Header */}
                          <button
                            onClick={() => toggleSection(section.section)}
                            className="w-full p-4 bg-gray-50 rounded-t-lg text-left hover:bg-gray-100 transition-colors"
                          >
                            <div className="flex items-center justify-between">
                              <div className="flex items-center gap-3">
                                <div className="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center">
                                  <span className="text-sm font-semibold text-blue-600">
                                    {sectionIndex + 1}
                                  </span>
                                </div>
                                <div>
                                  <h3 className="font-semibold text-gray-900 text-sm">
                                    {section.section}
                                  </h3>
                                  <p className="text-xs text-gray-600">
                                    {section.statements.length} statement
                                    {section.statements.length !== 1 ? "s" : ""}
                                  </p>
                                </div>
                              </div>
                              <ChevronDown
                                className={`w-4 h-4 text-gray-400 transition-transform duration-200 ${
                                  expandedSections.has(section.section)
                                    ? "rotate-180"
                                    : ""
                                }`}
                              />
                            </div>
                          </button>

                          {/* Section Content */}
                          {expandedSections.has(section.section) && (
                            <div className="p-4 space-y-3 border-t border-gray-200 transition-all duration-300 ease-in-out">
                              {section.statements.map(
                                (statement, statementIndex) => (
                                  <div
                                    key={statementIndex}
                                    className="bg-yellow-50 border border-yellow-200 rounded-lg p-3"
                                  >
                                    <div className="flex items-start gap-2">
                                      <div className="w-5 h-5 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                                        <span className="text-xs font-semibold text-green-600">
                                          {statementIndex + 1}
                                        </span>
                                      </div>
                                      <div className="flex-1">
                                        <button
                                          onClick={() =>
                                            handleStatementClick(
                                              statement.statement,
                                              section.section
                                            )
                                          }
                                          className={`w-full text-left text-sm text-gray-800 mb-2 px-2 py-1 rounded font-semibold transition-colors cursor-pointer ${
                                            selectedStatement ===
                                            statement.statement
                                              ? "bg-yellow-400 border-2 border-yellow-600 shadow-md"
                                              : "bg-yellow-200 hover:bg-yellow-300"
                                          }`}
                                        >
                                          "{statement.statement}"
                                        </button>
                                        <div>
                                          <h5 className="text-xs font-medium text-gray-700 mb-1 flex items-center gap-1">
                                            <CheckCircle className="w-3 h-3 text-green-500" />
                                            Supporting Sources (
                                            {statement.sources.length})
                                          </h5>
                                          <div className="bg-white border border-gray-200 rounded p-2 text-xs">
                                            <ul className="space-y-1">
                                              {statement.sources.map(
                                                (source, sourceIndex) => (
                                                  <li
                                                    key={sourceIndex}
                                                    className="text-gray-700"
                                                  >
                                                    {source}
                                                  </li>
                                                )
                                              )}
                                            </ul>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                )
                              )}
                            </div>
                          )}
                        </div>
                      )
                    )}
                  </div>
                </div>
              )
            )}
          </div>

          {/* Right Column - Care Plan */}
          <div className="lg:col-span-2">
            <div className="glass-card p-6 rounded-2xl shadow-lg print:shadow-none print:border h-full flex flex-col">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                  <FileText className="w-5 h-5" />
                  Care Plan
                </h2>
                {reportData.sourceAttribution && (
                  <button
                    onClick={() => setShowSources(!showSources)}
                    className="btn-primary flex items-center gap-2 text-sm"
                  >
                    <Eye className="w-4 h-4" />
                    {showSources ? "Hide Sources" : "View Sources"}
                  </button>
                )}
              </div>
              <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:border flex-1 flex flex-col">
                <div
                  key={`${highlightedSection}-${highlightedStatement}`}
                  className="text-gray-900 text-sm leading-relaxed flex-1 overflow-y-auto prose prose-sm max-w-none"
                  dangerouslySetInnerHTML={{
                    __html: formatCarePlanText(reportData.carePlanText),
                  }}
                />
                {/* Debug: Show current highlighting state */}
                <div className="mt-2 p-2 bg-gray-100 text-xs text-gray-600">
                  Debug: Section="{highlightedSection}", Statement="
                  {highlightedStatement}"
                </div>
                <div className="mt-4 pt-4 border-t border-gray-200 text-sm text-gray-500 flex flex-wrap gap-4">
                  <p>Generated by: {reportData.generatedBy}</p>
                  <p>Generated on: {formatDateTime(reportData.generatedAt)}</p>
                  <p>Status: {reportData.isFinal ? "Final" : "Draft"}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
