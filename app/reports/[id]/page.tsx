"use client";

import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { toast } from "sonner";
import {
  ArrowLeft,
  User,
  Calendar,
  Stethoscope,
  FileText,
  Pill,
  AlertTriangle,
  Clock,
  CheckCircle,
  Loader2,
  Download,
  Printer,
} from "lucide-react";

interface PatientReportData {
  id: string;
  patientName: string;
  mrn: string;
  providerName: string;
  providerNPI: string;
  medication: string;
  primaryDiagnosis: string;
  additionalDiagnoses: string[];
  medicationHistory: string[];
  carePlanText: string;
  generatedAt: string;
  generatedBy: string;
  version: number;
  isFinal: boolean;
  patientInfo: {
    firstName: string;
    lastName: string;
    dateOfBirth: string | null;
    sex: string | null;
    weight: number | null;
    allergies: string | null;
  };
  orderCreatedAt: string;
}

export default function PatientReportPage() {
  const router = useRouter();
  const params = useParams();
  const [reportData, setReportData] = useState<PatientReportData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (params.id) {
      fetchReportData(params.id as string);
    }
  }, [params.id]);

  const fetchReportData = async (id: string) => {
    try {
      setLoading(true);
      const response = await fetch(`/api/reports/${id}`);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to fetch report");
      }

      const data = await response.json();
      setReportData(data);
    } catch (error) {
      console.error("Error fetching report:", error);
      setError(
        error instanceof Error ? error.message : "Failed to load report"
      );
      toast.error("Failed to load patient report");
    } finally {
      setLoading(false);
    }
  };

  const handlePrint = () => {
    window.print();
  };

  const handleDownload = () => {
    if (!reportData) return;

    // Download Care Plan
    const carePlanContent = reportData.carePlanText;

    const carePlanBlob = new Blob([carePlanContent], { type: "text/plain" });
    const carePlanUrl = URL.createObjectURL(carePlanBlob);
    const carePlanLink = document.createElement("a");
    carePlanLink.href = carePlanUrl;
    carePlanLink.download = `care-plan-${reportData.mrn}-${
      new Date().toISOString().split("T")[0]
    }.txt`;
    document.body.appendChild(carePlanLink);
    carePlanLink.click();
    document.body.removeChild(carePlanLink);
    URL.revokeObjectURL(carePlanUrl);

    // Download Patient Records
    const patientRecordsContent = `PATIENT RECORDS
===============

PATIENT INFORMATION:
-------------------
Patient Name: ${reportData.patientName}
Medical Record Number (MRN): ${reportData.mrn}
Date of Birth: ${
      reportData.patientInfo.dateOfBirth
        ? formatDate(reportData.patientInfo.dateOfBirth)
        : "Not specified"
    }
Sex: ${reportData.patientInfo.sex || "Not specified"}
Weight: ${
      reportData.patientInfo.weight
        ? `${reportData.patientInfo.weight} kg`
        : "Not specified"
    }
Allergies: ${reportData.patientInfo.allergies || "None reported"}

PROVIDER INFORMATION:
--------------------
Provider Name: ${reportData.providerName}
NPI: ${reportData.providerNPI}

DIAGNOSIS INFORMATION:
---------------------
Primary Diagnosis: ${reportData.primaryDiagnosis}
${
  reportData.additionalDiagnoses.length > 0
    ? `Additional Diagnoses:
${reportData.additionalDiagnoses
  .map((diag, index) => `${index + 1}. ${diag}`)
  .join("\n")}`
    : ""
}

MEDICATION INFORMATION:
---------------------
Current Medication: ${reportData.medication}
${
  reportData.medicationHistory.length > 0
    ? `Medication History:
${reportData.medicationHistory
  .map((med, index) => `${index + 1}. ${med}`)
  .join("\n")}`
    : ""
}

ORDER INFORMATION:
-----------------
Order Created: ${formatDateTime(reportData.orderCreatedAt)}
Care Plan Generated: ${formatDateTime(reportData.generatedAt)}
Generated by: ${reportData.generatedBy}
Version: ${reportData.version}
Status: ${reportData.isFinal ? "Final" : "Draft"}`;

    const patientRecordsBlob = new Blob([patientRecordsContent], {
      type: "text/plain",
    });
    const patientRecordsUrl = URL.createObjectURL(patientRecordsBlob);
    const patientRecordsLink = document.createElement("a");
    patientRecordsLink.href = patientRecordsUrl;
    patientRecordsLink.download = `patient-records-${reportData.mrn}-${
      new Date().toISOString().split("T")[0]
    }.txt`;
    document.body.appendChild(patientRecordsLink);
    patientRecordsLink.click();
    document.body.removeChild(patientRecordsLink);
    URL.revokeObjectURL(patientRecordsUrl);

    toast.success("Care plan and patient records downloaded successfully");
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const formatCarePlanText = (text: string): string => {
    // Convert line breaks to <br> tags
    let formattedText = text.replace(/\n/g, "<br>");

    // Handle double asterisks (**text**) for bold
    formattedText = formattedText.replace(
      /\*\*(.*?)\*\*/g,
      "<strong>$1</strong>"
    );

    // Handle single asterisks (*text*) for bold
    formattedText = formattedText.replace(
      /\*([^*]+)\*/g,
      "<strong>$1</strong>"
    );

    return formattedText;
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="w-8 h-8 animate-spin text-blue-600 mx-auto mb-4" />
          <p className="text-lg font-medium text-gray-900">
            Loading patient report...
          </p>
        </div>
      </div>
    );
  }

  if (error || !reportData) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">
            Error Loading Report
          </h2>
          <p className="text-gray-600 mb-4">{error || "Report not found"}</p>
          <button onClick={() => router.back()} className="btn-primary">
            Go Back
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen py-8 px-4 sm:px-6 lg:px-8 print:py-4">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="glass-card p-6 rounded-2xl shadow-lg mb-6 print:shadow-none print:border">
          <div className="flex items-center justify-between mb-6">
            <button
              onClick={() => router.back()}
              className="btn-ghost flex items-center gap-2 print:hidden"
            >
              <ArrowLeft className="w-4 h-4" />
              Back to Reports
            </button>
            <div className="flex gap-2 print:hidden">
              <button
                onClick={handleDownload}
                className="btn-secondary flex items-center gap-2"
              >
                <Download className="w-4 h-4" />
                Download
              </button>
              <button
                onClick={handlePrint}
                className="btn-secondary flex items-center gap-2"
              >
                <Printer className="w-4 h-4" />
                Print
              </button>
            </div>
          </div>

          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Patient Care Plan Report
            </h1>
            <div className="flex items-center justify-center gap-4 text-sm text-gray-600">
              <div className="flex items-center gap-1">
                <Clock className="w-4 h-4" />
                Generated: {formatDateTime(reportData.generatedAt)}
              </div>
              <div className="flex items-center gap-1">
                <CheckCircle className="w-4 h-4 text-green-500" />
                Version {reportData.version}
              </div>
            </div>
          </div>
        </div>

        {/* Two Column Layout */}
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Left Column - Patient Information */}
          <div className="lg:col-span-1 space-y-6">
            {/* Patient Information Card */}
            <div className="glass-card p-6 rounded-2xl shadow-lg print:shadow-none print:border">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <User className="w-5 h-5" />
                Patient Information
              </h2>
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-gray-500">
                    Patient Name
                  </label>
                  <p className="text-lg font-semibold text-gray-900">
                    {reportData.patientName}
                  </p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">
                    Medical Record Number (MRN)
                  </label>
                  <p className="text-lg font-mono font-semibold text-gray-900">
                    {reportData.mrn}
                  </p>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-500">
                    Provider
                  </label>
                  <p className="text-lg font-semibold text-gray-900">
                    {reportData.providerName}
                  </p>
                  <p className="text-sm text-gray-600">
                    NPI: {reportData.providerNPI}
                  </p>
                </div>
                {reportData.patientInfo.dateOfBirth && (
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Date of Birth
                    </label>
                    <p className="text-lg text-gray-900">
                      {formatDate(reportData.patientInfo.dateOfBirth)}
                    </p>
                  </div>
                )}
                {reportData.patientInfo.sex && (
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Sex
                    </label>
                    <p className="text-lg text-gray-900">
                      {reportData.patientInfo.sex}
                    </p>
                  </div>
                )}
                {reportData.patientInfo.weight && (
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Weight
                    </label>
                    <p className="text-lg text-gray-900">
                      {reportData.patientInfo.weight} kg
                    </p>
                  </div>
                )}
                {reportData.patientInfo.allergies && (
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Allergies
                    </label>
                    <p className="text-lg text-gray-900">
                      {reportData.patientInfo.allergies}
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Diagnosis & Medication Card */}
            <div className="glass-card p-6 rounded-2xl shadow-lg print:shadow-none print:border">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <Stethoscope className="w-5 h-5" />
                Diagnosis & Medication
              </h2>
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-gray-500">
                    Primary Diagnosis
                  </label>
                  <p className="text-lg font-semibold text-gray-900">
                    {reportData.primaryDiagnosis}
                  </p>
                </div>
                {reportData.additionalDiagnoses.length > 0 && (
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Additional Diagnoses
                    </label>
                    <ul className="list-disc list-inside space-y-1">
                      {reportData.additionalDiagnoses.map(
                        (diagnosis, index) => (
                          <li key={index} className="text-gray-900">
                            {diagnosis}
                          </li>
                        )
                      )}
                    </ul>
                  </div>
                )}
                <div>
                  <label className="text-sm font-medium text-gray-500">
                    Medication
                  </label>
                  <p className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                    <Pill className="w-4 h-4" />
                    {reportData.medication}
                  </p>
                </div>
                {reportData.medicationHistory.length > 0 && (
                  <div>
                    <label className="text-sm font-medium text-gray-500">
                      Medication History
                    </label>
                    <ul className="list-disc list-inside space-y-1">
                      {reportData.medicationHistory.map((med, index) => (
                        <li key={index} className="text-gray-900">
                          {med}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Right Column - Care Plan */}
          <div className="lg:col-span-2">
            <div className="glass-card p-6 rounded-2xl shadow-lg print:shadow-none print:border h-full flex flex-col">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Care Plan
              </h2>
              <div className="bg-gray-50 rounded-lg p-6 print:bg-white print:border flex-1 flex flex-col">
                <div
                  className="text-gray-900 text-sm leading-relaxed flex-1 overflow-y-auto prose prose-sm max-w-none"
                  dangerouslySetInnerHTML={{
                    __html: formatCarePlanText(reportData.carePlanText),
                  }}
                />
                <div className="mt-4 pt-4 border-t border-gray-200 text-sm text-gray-500 flex flex-wrap gap-4">
                  <p>Generated by: {reportData.generatedBy}</p>
                  <p>Generated on: {formatDateTime(reportData.generatedAt)}</p>
                  <p>Status: {reportData.isFinal ? "Final" : "Draft"}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
